关于ADB的实现说明

I. 概览:

Android ADB使用于:

- 跟踪连接到给定主机开发者机器或在其上运行的所有 Android 设备和模拟器实例

- 为客户端（命令行用户或 DDMS 等辅助程序）的利益实施各种控制命令（例如“adb shell”、“adb pull”等）。 这些命令在 ADB 中称为“服务”。

总的来说，一切都通过以下组件进行：

  1. The ADB server

    这是在主机上运行的后台进程。 其目的是感应 USB 端口以了解设备何时连接/移除，以及模拟器实例何时启动/停止。
    因此，它维护一个“已连接设备”列表，并为每个设备分配一个“状态”：离线(OFFLINE)、引导加载器(BOOTLOADER)、恢复(RECOVERY)或在线(ONLINE)（更多内容见下文）。
    ADB 服务器实际上是一个巨大的多路复用循环，其目的是协调客户端、服务和设备之间的数据交换（实际上是数据包）。


  2. The ADB daemon (adbd)

    “adbd”程序在 Android 设备或模拟系统中作为后台进程运行。 它的目的是连接到 ADB 服务器（通过 USB 连接设备，通过 TCP 连接模拟器）并为运行在主机上的客户端提供一些服务。
    当 ADB 服务器成功连接到其中的 adbd 程序时，ADB 服务器认为该设备处于在线状态。 否则，设备处于离线状态，这意味着 ADB 服务器检测到新设备/模拟器，但无法连接到 adbd 守护程序。
    引导加载器(BOOTLOADER)和恢复(RECOVERY) 状态对应于设备处于引导加载程序或恢复模式时的备用状态。

  3. The ADB command-line client

    The 'adb' command-line program is used to run adb commands from a shell
    or a script. It first tries to locate the ADB server on the host machine,
    and will start one automatically if none is found.

    Then, the client sends its service requests to the ADB server.

    Currently, a single 'adb' binary is used for both the server and client.
    this makes distribution and starting the server easier.


  4. Services

    There are essentially two kinds of services that a client can talk to.

    Host Services:
      These services run within the ADB Server and thus do not need to
      communicate with a device at all. A typical example is "adb devices"
      which is used to return the list of currently known devices and their
      states. They are a few other services though.

    Local Services:
      These services either run within the adbd daemon, or are started by
      it on the device. The ADB server is used to multiplex streams
      between the client and the service running in adbd. In this case
      its role is to initiate the connection, then of being a pass-through
      for the data.


II. Protocol details:

  1. Client <-> Server protocol:

    This details the protocol used between ADB clients and the ADB
    server itself. The ADB server listens on TCP:localhost:5037.

    A client sends a request using the following format:

        1. A 4-byte hexadecimal string giving the length of the payload
        2. Followed by the payload itself.

    For example, to query the ADB server for its internal version number,
    the client will do the following:

        1. Connect to tcp:localhost:5037
        2. Send the string "000Chost:version" to the corresponding socket

    The 'host:' prefix is used to indicate that the request is addressed
    to the server itself (we will talk about other kinds of requests later).
    The content length is encoded in ASCII for easier debugging.

    The server should answer a request with one of the following:

        1. For success, the 4-byte "OKAY" string

        2. For failure, the 4-byte "FAIL" string, followed by a
           4-byte hex length, followed by a string giving the reason
           for failure.

    Note that the connection is still alive after an OKAY, which allows the
    client to make other requests. But in certain cases, an OKAY will even
    change the state of the connection.

    For example, the case of the 'host:transport:<serialnumber>' request,
    where '<serialnumber>' is used to identify a given device/emulator; after
    the "OKAY" answer, all further requests made by the client will go
    directly to the corresponding adbd daemon.

    The file SERVICES.TXT lists all services currently implemented by ADB.


  2. Transports:

    An ADB transport models a connection between the ADB server and one device
    or emulator. There are currently two kinds of transports:

       - USB transports, for physical devices through USB

       - Local transports, for emulators running on the host, connected to
         the server through TCP

    In theory, it should be possible to write a local transport that proxies
    a connection between an ADB server and a device/emulator connected to/
    running on another machine. This hasn't been done yet though.

    Each transport can carry one or more multiplexed streams between clients
    and the device/emulator they point to. The ADB server must handle
    unexpected transport disconnections (e.g. when a device is physically
    unplugged) properly.
